{
  "resourceType": "Library",
  "id": "library-EXM529-1.0.000",
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-EXM529-1.0.000</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.000</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"3\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/dbcg/connectathon/Library/library-FHIRHelpers|4.0.1</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/dbcg/connectathon/Library/library-MATGlobalCommonFunctions|5.0.000</span></p></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://fhir.org/guides/dbcg/connectathon/Library/library-SupplementalDataElements|2.0.0</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"15\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1104.10</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.152</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.159</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.114</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.129</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.117</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.119</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.139</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.2363</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.134</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library EXM529 version '1.0.000'\n\nusing FHIR version '4.0.1'\n\ninclude FHIRHelpers version '4.0.1' called FHIRHelpers\ninclude MATGlobalCommonFunctions version '5.0.000' called Global\ninclude SupplementalDataElements version '2.0.0' called SDE\n\ncodesystem &quot;LOINC&quot;: 'http://loinc.org'\n\nvalueset &quot;Bicarbonate Lab Test&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.139'\nvalueset &quot;Body Temperature LOINC&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.152'\nvalueset &quot;Body Weight&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.159'\nvalueset &quot;Creatinine Lab Test&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.2363'\nvalueset &quot;Emergency Department Visit&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292'\nvalueset &quot;Encounter Inpatient&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307'\nvalueset &quot;Glucose Lab Test&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.134'\nvalueset &quot;Hematocrit lab test&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.114'\nvalueset &quot;Medicare payer&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1104.10'\nvalueset &quot;Potassium Lab Test&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.117'\nvalueset &quot;Sodium Lab Test V&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.119'\nvalueset &quot;White Blood Cells Count Lab Test&quot;:  'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.129'\n\ncode &quot;Heart rate&quot;: '8867-4' from &quot;LOINC&quot; display 'Heart rate'\ncode &quot;Oxygen saturation in Arterial blood by Pulse oximetry&quot;: '59408-5' from &quot;LOINC&quot; display 'Oxygen saturation in Arterial blood by Pulse oximetry'\ncode &quot;Respiratory rate&quot;: '9279-1' from &quot;LOINC&quot; display 'Respiratory rate'\ncode &quot;Systolic blood pressure&quot;: '8480-6' from &quot;LOINC&quot; display 'Systolic blood pressure'\n\nparameter &quot;Measurement Period&quot; Interval&lt;DateTime&gt;\n\t\tdefault Interval[@2019-01-01T00:00:00.0, @2020-01-01T00:00:00.0)\n\ncontext Patient\n\ndefine &quot;SDE Ethnicity&quot;:\n  SDE.&quot;SDE Ethnicity&quot;\n\ndefine &quot;SDE Payer&quot;:\n  SDE.&quot;SDE Payer&quot;\n\ndefine &quot;SDE Race&quot;:\n  SDE.&quot;SDE Race&quot;\n\ndefine &quot;SDE Sex&quot;:\n  SDE.&quot;SDE Sex&quot;\n\ndefine &quot;Initial Population&quot;:\n  exists &quot;Inpatient Encounters&quot; //added &quot;exists&quot;\n\ndefine &quot;Inpatient Encounters&quot;:\n  from\n    [Encounter: &quot;Encounter Inpatient&quot;] InpatientEncounter,\n    [Coverage: &quot;Medicare payer&quot;] Payer\n//    [Patient] Birthdate // no need to alias Patient here, can just use &quot;Patient&quot; in age calculation\n    where (Payer.period overlaps before InpatientEncounter.period //what is the intended timing? This phrase measns that the encounter could end after the coverage. Is that a problem? see https://cql.hl7.org/02-authorsguide.html#comparing-intervals\n    \t\t\t or start of Payer.period same as start of InpatientEncounter.period) //this second timing phrase is unneeded, &quot;overlaps before&quot; above means &quot;start of X &lt;= start of Y, and start of Y &lt;= end of X&quot;; see https://cql.hl7.org/02-authorsguide.html#comparing-intervals\n\t\t\tand end of Payer.period != start of InpatientEncounter.period //coverage cannot end exactly when encounter starts. Should this be at &quot;day&quot; granularity? And encounter + 1 day?\n//      and Global.HospitalizationWithObservationLengthofStay(InpatientEncounter) &lt; 365\n      and InpatientEncounter.period ends during &quot;Measurement Period&quot;\n//      and Global.CalendarAgeInYearsAt(FHIRHelpers.ToDate(Patient.birthDate), start of InpatientEncounter.period) &gt;= 65\n    return InpatientEncounter\n\ndefine &quot;Results&quot;:\nflatten{//flatten turns a list of lists into a single list\n  // First physical exams (vital signs)\n    &quot;FirstPhysicalExam&quot;(([Observation: &quot;Heart rate&quot;] O where O.effective is not null sort by effective.value), 'HR'), //Warnings for direct reference codes are not a concern. Logic will still work. Confirmed during FHIR Call 2/4/20\n    &quot;FirstPhysicalExam&quot;(([Observation: &quot;Systolic blood pressure&quot;] O where O.effective is not null sort by effective.value), 'SBP'),\n    &quot;FirstPhysicalExam&quot;(([Observation: &quot;Respiratory rate&quot;] O where O.effective is not null sort by effective.value), 'RR'),\n    &quot;FirstPhysicalExam&quot;(([Observation: &quot;Body Temperature LOINC&quot;] O where O.effective is not null sort by effective.value), 'Temp'),\n    &quot;FirstPhysicalExam&quot;(([Observation: &quot;Oxygen saturation in Arterial blood by Pulse oximetry&quot;] O where O.effective is not null sort by effective.value), 'O2Sat'),\n\t// Weight uses lab test timing\n\t\t&quot;FirstPhysicalExamWithUsingLabTiming&quot;(([Observation: &quot;Body Weight&quot;] O where O.effective is not null sort by effective.value), 'Weight'),\n  // First lab tests\n    &quot;FirstLabTest&quot;(([Observation: &quot;Hematocrit lab test&quot;] O where O.issued is not null sort by issued.value), 'Hemat'),\n    &quot;FirstLabTest&quot;(([Observation: &quot;White Blood Cells Count Lab Test&quot;] O where O.issued is not null sort by issued.value), 'WBC'),\n    &quot;FirstLabTest&quot;(([Observation: &quot;Potassium Lab Test&quot;] O where O.issued is not null sort by issued.value), 'Potass'),\n    &quot;FirstLabTest&quot;(([Observation: &quot;Sodium Lab Test V&quot;] O where O.issued is not null sort by issued.value), 'Sodium'),\n    &quot;FirstLabTest&quot;(([Observation: &quot;Bicarbonate Lab Test&quot;] O where O.issued is not null sort by issued.value), 'Bicarb'),\n    &quot;FirstLabTest&quot;(([Observation: &quot;Creatinine Lab Test&quot;] O where O.issued is not null sort by issued.value), 'Creat'),\n    &quot;FirstLabTest&quot;(([Observation: &quot;Glucose Lab Test&quot;] O where O.issued is not null sort by issued.value), 'Glucose')\n}\n\ndefine function &quot;FirstLabTest&quot;(LabList List&lt;FHIR.Observation&gt;, CCDE String)://returns List&lt;System.String&gt;\n  &quot;Inpatient Encounters&quot; Encounter\n  let firstlab: First(LabList Lab\n\t\t//Need to use Global.&quot;Normalize Interval&quot; to account for different time data types, but using &quot;in&quot; for now\n    where Lab.issued in Interval[start of Encounter.period - 1440 minutes, start of Encounter.period + 1440 minutes]//should use &quot;1 day&quot;? Would this cause issues during daylight time switches?\n\t\t\tand Lab.status in {'final', 'amended', 'preliminary'})\n    //sort by issued.value)//Sort doesn't work here as intended. Sorting need to be done outside of the Encounter comparison, so it has been moved above\n\t\t//Note that when using + with string values, if either argument is null, the result will be null. To treat null as the empty string (''), use the &amp; operator\n\treturn '\\r\\n' &amp; CCDE &amp; ',' &amp; (Encounter.id as String) &amp; ',' &amp; ToString(firstlab.value as Quantity) &amp; ',' &amp; ToString(firstlab.issued)//May need to account for value[x] as data types other than Quantity\n\t//Added &quot; &amp; '\\r\\n'&quot; to the return to create new lines\n\ndefine function &quot;FirstPhysicalExam&quot;(ExamList List&lt;FHIR.Observation&gt;, CCDE String):\n  &quot;Inpatient Encounters&quot; Encounter\n  \tlet firstexam: First(ExamList Exam\n\t\twhere Exam.effective in Interval[start of Encounter.period - 1440 minutes, start of Encounter.period + 120 minutes]//again, &quot;1 day&quot; and &quot;2 hours&quot;? Daylight savings switch?\n\t\t\tand Exam.status in {'final', 'amended', 'preliminary'})\n\treturn '\\r\\n' &amp; CCDE &amp; ',' &amp; (Encounter.id as String) &amp; ',' &amp; ToString(firstexam.value as Quantity) &amp; ',' &amp; ToString(firstexam.effective)\n\ndefine function &quot;FirstPhysicalExamWithUsingLabTiming&quot;(ExamList List&lt;FHIR.Observation&gt;, CCDE String):\n  &quot;Inpatient Encounters&quot; Encounter\n  let firstexamwithlabtiming: First(ExamList Exam\n    where Exam.effective in Interval[start of Encounter.period - 1440 minutes, start of Encounter.period + 1440 minutes]//same questions again.\n\t\t\tand Exam.status in {'final', 'amended', 'preliminary'})\n  return '\\r\\n' &amp; CCDE &amp; ',' &amp; (Encounter.id as String) &amp; ',' &amp; ToString(firstexamwithlabtiming.value as Quantity) &amp; ',' &amp; ToString(firstexamwithlabtiming.effective)\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n    </table>\n</div>"
  },
  "contained": [
    {
      "resourceType": "Device",
      "id": "cqf-tooling",
      "meta": {
        "profile": [
          "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/device-softwaresystem-cqfm"
        ]
      },
      "type": {
        "coding": [
          {
            "system": "http://hl7.org/fhir/us/cqfmeasures/CodeSystem/software-system-type",
            "code": "tooling"
          }
        ]
      },
      "version": [
        {
          "value": "1.1.0-SNAPSHOT"
        }
      ]
    }
  ],
  "extension": [
    {
      "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
      "valueReference": {
        "reference": "#cqf-tooling"
      }
    }
  ],
  "version": "1.0.000",
  "name": "EXM529",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library"
      }
    ]
  },
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "http://fhir.org/guides/dbcg/connectathon/Library/library-FHIRHelpers|4.0.1"
    },
    {
      "type": "depends-on",
      "resource": "http://fhir.org/guides/dbcg/connectathon/Library/library-MATGlobalCommonFunctions|5.0.000"
    },
    {
      "type": "depends-on",
      "resource": "http://fhir.org/guides/dbcg/connectathon/Library/library-SupplementalDataElements|2.0.0"
    }
  ],
  "dataRequirement": [
    {
      "type": "Encounter",
      "codeFilter": [
        {
          "path": "type",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307"
        }
      ]
    },
    {
      "type": "Coverage",
      "codeFilter": [
        {
          "path": "type",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1104.10"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.152"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.159"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.114"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.129"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.117"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.119"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.139"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.2363"
        }
      ]
    },
    {
      "type": "Observation",
      "codeFilter": [
        {
          "path": "code",
          "valueSet": "http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1045.134"
        }
      ]
    }
  ],
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": ""
    },
    {
      "contentType": "text/cql",
      "data": ""
    }
  ]
}